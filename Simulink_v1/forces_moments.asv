% forces_moments.m
%   Computes the foreces and moments acting on the airframe. 
%
%   Output is
%       F     - forces
%       M     - moments
%       Va    - airspeed
%       alpha - angle of attack
%       beta  - sideslip angle
%       wind  - wind vector in the inertial frame
%
%  Revised:
%   2/2/2010 - RB 
%   5/14/2010 - RB

function out = forces_moments(x, delta, wind, P)

    % relabel the inputs
    pn      = x(1);
    pe      = x(2);
    pd      = x(3);
    u       = x(4);
    v       = x(5);
    w       = x(6);
    phi     = x(7);
    theta   = x(8);
    psi     = x(9);
    p       = x(10);
    q       = x(11);
    r       = x(12);
    delta_e = delta(1);
    delta_a = delta(2);
    delta_r = delta(3);
    delta_t = delta(4);
    w_ns    = wind(1); % steady wind - North
    w_es    = wind(2); % steady wind - East
    w_ds    = wind(3); % steady wind - Down
    u_wg    = wind(4); % gust along body x-axis
    v_wg    = wind(5); % gust along body y-axis    
    w_wg    = wind(6); % gust along body z-axis
    
    
    % body to vehicle rotation matrix 
    R_b2v = [[cos(theta)*cos(psi)  sin(phi)*sin(theta)*cos(psi)-cos(phi)*sin(psi)  cos(phi)*sin(theta)*cos(psi)+sin(phi)*sin(psi)];
             [cos(theta)*sin(psi)  sin(phi)*sin(theta)*sin(psi)+cos(phi)*cos(psi)  cos(phi)*sin(theta)*sin(psi)-sin(phi)*cos(psi)];
             [-sin(theta)    sin(phi)*cos(theta)   cos(phi)*cos(theta) ]];
    R_v2b = R_b2v'; 
    
    
    % wind vector expresed in the body frame
    Vw_b = R_v2b*[w_ns w_es w_ds]' + [u_wg v_wg w_wg ]'; 
    
    % compute wind vector in the inertial frame
    Vw_i = R_b2v*Vw_b;
    
    w_n = Vw_i(1);
    w_e = Vw_i(2);
    w_d = Vw_i(3);
    
    
    % compute airspeed Va, angle-of-attack alpha, side-slip beta
    u_w = Vw_b(1);
    v_w = Vw_b(2);
    w_w = Vw_b(3);    
    
    Va_b = [u v w]' - [u_w v_w w_w]'; % Airspeed vector in the body frame
    
    u_r = Va_b(1);
    v_r = Va_b(2);                                                                                                                       
    w_r = Va_b(3);
    
    Va    = sqrt(u_r^2 + v_r^2 + w_r^2) ; % Airspeed
    
    if u_r ~= 0
        alpha = atan(w_r/u_r); % angle of attack
    else
        alpha = 0;
    end
    
    beta  = asin(v_r/Va); %  sideslip angle
    
    %--------------------------------------------
    
    g = P.gravity;
    m = P.mass;
    
    % gravity force expressed in the body frame 
    fg_b = [[ -m*g*sin(theta) ]
            [  m*g*cos(theta)*sin(phi)  ]
            [  m*g*cos(theta)*cos(phi)  ]];
    
    % aerodinamic forces expressed in the body frame 
    rho = P.rho; % air density
    S_wing = P.S_wing;  % area of the MAV wing
    c =  P.c; % mean chord of the MAV wing
    b = P.b; % wingspan   
    
    alpha0 = P.alpha0; 
    M = P.M;
    eo = P.eo;
    
    C_L_0  = P.C_L_0 ; 
    C_L_alpha = P.C_L_alpha;
    C_D_p = P.C_D_p; 
    
    C_D_q = P.C_D_q; 
    C_L_q = P.C_L_q; 
    C_D_delta_e = P.C_D_delta_e;
    C_L_delta_e = P.C_L_delta_e;
    
    C_Y_0 = P.C_Y_0;
    C_Y_beta = P.C_Y_beta;
    C_Y_p = P.C_Y_p;
    C_Y_r = P.C_Y_r;
    C_Y_delta_a = P.C_Y_delta_a;
    C_Y_delta_r = P.C_Y_delta_r;
    
    S_prop = P.S_prop;
    C_prop = P.C_prop;
    k_motor = P.k_motor;  
    
    % nonlinear lift coefficient model (eq. 4.9)
    sigma_alpha = ( 1 + exp(-M*(alpha-alpha0)) + exp(M*(alpha+alpha0)) ) / ...
               (  (1 + exp(-M*(alpha-alpha0)) )*(1 + exp(M*(alpha+alpha0)) ) )  ;  
    
    C_L =  (1 - sigma_alpha)*(C_L_0 + C_L_alpha*alpha) + sigma_alpha*(2*sign(alpha)*sin(alpha)*sin(alpha)*cos(alpha)); 
    
    % nonlinear drag coefficient model (eq. 4.11)
    AR = (b^2)/S_wing;
    C_L_alpha = (pi*AR)/ ( 1 + sqrt( 1 + (AR/2)^2 ) );
    
    C_D = C_D_p + ((C_L_0 + C_L_alpha*alpha)^2)/(pi*eo*AR);
    
    % longitudinal aerodinamic coefficients
    
    C_X = -C_D*cos(alpha)+ C_L*sin(alpha);
    C_X_q = -C_D_q*cos(alpha) + C_L_q*sin(alpha);
    C_X_delta_e = -C_D_delta_e*cos(alpha) + C_L_delta_e*sin(alpha);
    
    C_Z = -C_D*sin(alpha)- C_L*cos(alpha);
    C_Z_q = -C_D_q*sin(alpha) - C_L_q*cos(alpha);
    C_Z_delta_e = -C_D_delta_e*sin(alpha) - C_L_delta_e*cos(alpha);
       
    %  aerodinamic forces
    fa_b = (1/2)*rho*(Va^2)*S_wing* [...
           [C_X + C_X_q*(c/(2*Va))*q + C_X_delta_e*delta_e];
           [C_Y_0 + C_Y_beta*beta + C_Y_p*(b/(2*Va))*p + C_Y_r*(b/(2*Va))*r + C_Y_delta_a*delta_a + C_Y_delta_r*delta_r];
           [C_Z + C_Z_q*(c/(2*Va))*q + C_Z_delta_e*delta_e]];
    
    % propultion force
    
    fprop_b = (1/2)*rho*S_prop*C_prop*[...
             [((k_motor*delta_t)^2) - Va^2]
             [          0                 ]
             [          0                 ]];
    % Eq. (4.18)
    
    f_b =  fg_b + fa_b + fprop_b;
         
    %f_b(3) = -1;      
    Force = [f_b(1); f_b(2); f_b(3)];
    
    %---------------------------
    C_ell_0 = P.C_ell_0; 
    C_ell_beta = P.C_ell_beta; 
    C_ell_p = P.C_ell_p;
    C_ell_r = P.C_ell_r;
    C_ell_delta_a = P.C_ell_delta_a;
    C_ell_delta_r = P.C_ell_delta_r;
    C_m_0 = P.C_m_0;
    C_m_alpha = P.C_m_alpha;
    C_m_q = P.C_m_q ;
    C_m_delta_e = P.C_m_delta_e;
    C_n_0 = P.C_n_0 ;
    C_n_beta = P.C_n_beta ;
    C_n_p = P.C_n_p ;
    C_n_r = P.C_n_r;
    
    
    Ta_b = (1/2)*rho*(Va^2)*S_wing* [...
           [b*( C_ell_0 + C_ell_beta*beta + C_ell_p*(b/(2*Va))*p + C_ell_r*(b/(2*Va))*r + C_ell_delta_a*delta_a + C_ell_delta_r*delta_r)];
           [c*( C_m_0 + C_m_alpha*alpha + C_m_q*(c/(2*Va))*q + C_m_delta_e*delta_e)]
           [b*( C_n_0 + C_n_beta*beta + C_n_p*(b/(2*Va))*p + C_n_r*(b/(2*Va))*r +
    
    
    
    
    Torque = [0; 0; 0];
    
    out = [Force; Torque; Va; alpha; beta; w_n; w_e; w_d];

end



